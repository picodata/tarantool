variables:
    # set larger git depth, so git describe works properly
    GIT_DEPTH: 0
    USER: 'tarantool'
    DOCKER_REGISTRY_PUB: docker-public.binary.picodata.io
    DOCKER_AUTH_CONFIG: $DOCKER_AUTH_RW
    # k8s runner config
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    # Helps to tolerate spurious network failures
    GET_SOURCES_ATTEMPTS: 3

stages:
  - test
  - build
  - pack
  - docker

.test:
    stage: test
    before_script:
      - git submodule update --init --recursive
      - git submodule foreach --recursive 'git clean -xffd'
      - git clean -xffd

luacheck:
    extends: .test
    tags: [docker]
    image: docker-public.binary.picodata.io/tarantool-testing:latest
    script:
      - make -f .test.mk luacheck

test-ubuntu:
    extends: .test
    retry: 2
    tags: [docker]
    image: docker-public.binary.picodata.io/tarantool-testing:latest
    script:
      - TAG_SHORT=$(git describe | awk -F- '{print $1}')
      - TAG_LONG=$(git describe --long | sed -n 's/^\([0-9\.]*\)-\([0-9]*\)-\([a-z0-9]*\)/\1.\2/p')
      - echo "TAG_LONG=$TAG_LONG" >> build.env
      - echo "TAG_SHORT=$TAG_SHORT" >> build.env
      - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
      - make -f .test.mk test-release
    artifacts:
      name: "artifacts-vars-${CI_PIPELINE_ID}"
      expire_in: 20 hour
      reports:
        dotenv: build.env

test_mac-m1:
    extends: .test
    tags: [mac-dev-m1]
    script:
      - ulimit -n 10240
      - sudo mkdir -p /private/tmp/t
      - sudo chown -R $(id -u) /private/tmp/t
      - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
      - make -f .test.mk build

checkpatch:
    extends: .test
    tags: [shell_p_t]
    script:
      - git clone git@github.com:tarantool/checkpatch.git
      - checkpatch/checkpatch.pl --color=always --git HEAD~1..HEAD

# run long tests and coverage on release build
coverage:
    extends: .test
    stage: build
    only:
      - web
      - tags
    retry: 2
    tags: [docker]
    image: docker-public.binary.picodata.io/tarantool-testing:latest
    variables:
      TEST_RUN_RETRIES: 3
      SERVER_START_TIMEOUT: 400
      REPLICATION_SYNC_TIMEOUT: 400
      TEST_TIMEOUT: 420
      NO_OUTPUT_TIMEOUT: 440
    script:
      - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
      - make -f .test.mk test-coverage

# TODO: move out shared setup for fuzzing jobs
# Check that fuzzing works
fuzz-check-build:
    extends: .test
    tags: [shell_p_t]
    script:
      # Clone oss-fuzz instead of adding it as a submodule
      # as we don't want it to be checked by static analyzers - it's used only for fuzzing
      - git clone --depth=1 https://github.com/google/oss-fuzz.git
      - cd oss-fuzz
      # Checkout a fixed oss-fuzz commit to guarantee reproducible builds
      - git fetch --depth=1 origin e8e124996508f1e4ffe566896638c7213ab440d5
      - git checkout e8e124996508f1e4ffe566896638c7213ab440d5
      - python3 infra/helper.py build_fuzzers --external .. --sanitizer=address
      - python3 infra/helper.py check_build --external .. --sanitizer=address

# Generate coverage report
fuzz-coverage:
    extends: .test
    tags: [shell_p_t]
    when: manual
    script:
      # Clone oss-fuzz instead of adding it as a submodule
      # as we don't want it to be checked by static analyzers - it's used only for fuzzing
      - git clone --depth=1 https://github.com/google/oss-fuzz.git
      - cd oss-fuzz
      # Checkout a fixed oss-fuzz commit to guarantee reproducible builds
      - git fetch --depth=1 origin e8e124996508f1e4ffe566896638c7213ab440d5
      - git checkout e8e124996508f1e4ffe566896638c7213ab440d5
      - python3 infra/helper.py build_fuzzers --external .. --sanitizer=coverage
      # `coverage` command requires corpus folders to be located in
      # `oss-fuzz/build/corpus/{project_name}`
      # TODO: find out why they are not located there by default
      - mkdir -p build/corpus/tarantool
      - cp -r ../test/static/corpus/* build/corpus/tarantool
      # add `_fuzzer` postfix to corpus folders
      - (cd build/corpus/tarantool && for i in *; do mv "$i" "${i%.}_fuzzer"; done)
      - python3 infra/helper.py coverage --no-serve --external ..
    artifacts:
      paths:
        - oss-fuzz/build/out/tarantool/report

pack-on-tag:
  stage: pack
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    PROJECT_TARGET: 'tarantool-picodata'
    TYPE: 'RELEASE'
  inherit:
    variables:
      - TYPE
      - PROJECT_TARGET
      - BRANCH_TARGET
  trigger:
    project: 'picodata/devops/builder'
    strategy: depend

.kaniko-image:
  image:
    name: docker-public.binary.picodata.io/kaniko-project/executor:v1.20.1-debug
    entrypoint: ['']
    pull_policy: [if-not-present]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "$DOCKER_AUTH_CONFIG" > /kaniko/.docker/config.json
  tags: ["docker"]
  script:
    - >
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile ${DOCKERFILE}
      --build-arg TARANTOOL_VERSION=$TAG_LONG ${PUSH_DOCKER}
      --cache=false --cache-run-layers=true --single-snapshot --compressed-caching=false --use-new-run --snapshot-mode=redo --cleanup
      --destination $DOCKER_REGISTRY_PUB/tarantool:$TAG_SHORT --destination $DOCKER_REGISTRY_PUB/tarantool:$TAG_LONG --destination $DOCKER_REGISTRY_PUB/tarantool:latest

build-docker-on-tag:
  stage: docker
  extends: .kaniko-image
  only:
    - tags
  needs:
    - pack-on-tag
  variables:
    PUSH_DOCKER: ""
    DOCKERFILE: docker/Dockerfile

run-tntmodule-tests-on-tag:
  stage: docker
  only:
    - tags
  variables:
    TARANTOOL_VERSION: $TARANTOOL_VERSION
  trigger:
    project: picodata/picodata/tarantool-module
    branch: master
    strategy: depend
  needs:
    - job: build-docker-on-tag
      artifacts: true
