default:
  tags:
    - docker
  retry:
    max: 1
    when:
      - scheduler_failure
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure

variables:
    # set larger git depth, so git describe works properly
    GIT_DEPTH: 0
    USER: 'tarantool'
    DOCKER_REGISTRY_PUB: docker-public.binary.picodata.io
    DOCKER_AUTH_CONFIG: $DOCKER_AUTH_RW
    KANIKO_REGISTRY_MIRROR: docker-proxy.binary.picodata.io
    BASE_IMAGE_LATEST: latest
    MAIN_BRANCH: &main-branch 2.11.5-picodata
    # k8s runner config
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: "6Gi"
    # Helps to tolerate spurious network failures
    GET_SOURCES_ATTEMPTS: 3

# job:rules explained:
#
# - if build-base changes on master branch (compared to HEAD~1)
#     * build-base-image (with tag latest) and push
#     * test (on base-image:latest)
# - if build-base changes on development branch (compared to master)
#     * build-base-image (with tag sha)
#     * test (on base-image:sha)
# - else (if build-base doesn't change)
#     * skip build-base-image
#     * just test (on base-image:latest)
#
# Anchor syntax explained here:
# https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html
#
.rules:
  - &if-build-base-changes-on-master-branch
    if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
    changes:
      # implies compare_to HEAD~1
      paths: &build-base-changes-paths
        - docker/**
        - .gitlab-ci.yml

  - &if-build-base-changes-on-dev-branch
    if: $CI_COMMIT_BRANCH != $MAIN_BRANCH
    changes:
      compare_to: *main-branch
      paths: *build-base-changes-paths

  - &else {}

stages:
  - build-base-image
  - test
  - build
  - pack
  - docker

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

.test:
  rules:
    - <<: *if-build-base-changes-on-master-branch
      variables:
        BASE_IMAGE_TAG: ${BASE_IMAGE_LATEST}
    - <<: *if-build-base-changes-on-dev-branch
      variables:
        BASE_IMAGE_TAG: ${CI_COMMIT_SHA}
    - <<: *else
      variables:
        BASE_IMAGE_TAG: ${BASE_IMAGE_LATEST}
  stage: test
  interruptible: true
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    GIT_SUBMODULE_STRATEGY: recursive

.parallel:
  parallel:
    matrix:
      - BUILD_PROFILE: [release, debug]


luacheck:
    extends: .test
    image: docker-public.binary.picodata.io/tarantool-testing:${BASE_IMAGE_TAG}
    script:
      - make -f .test.mk luacheck

test-ubuntu:
  extends:
    - .test
    - .parallel
  image: docker-public.binary.picodata.io/tarantool-testing:${BASE_IMAGE_TAG}
  variables:
    TEST_RUN_RETRIES: 3
    SERVER_START_TIMEOUT: 400
    REPLICATION_SYNC_TIMEOUT: 400
    TEST_TIMEOUT: 420
    NO_OUTPUT_TIMEOUT: 440
  script:
    - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
    - make -f .test.mk test-$BUILD_PROFILE

test_mac-m1:
    extends: .test
    tags: [mac-dev-m1]
    script:
      - ulimit -n 10240
      - sudo mkdir -p /private/tmp/t
      - sudo chown -R $(id -u) /private/tmp/t
      - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
      - make -f .test.mk build

checkpatch:
    extends: .test
    tags: [shell_p_t]
    script:
      - git clone git@github.com:tarantool/checkpatch.git
      - checkpatch/checkpatch.pl --color=always --git HEAD~1..HEAD

# run long tests and coverage on release build
coverage:
  extends: .test
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"
  retry: 2
  image: docker-public.binary.picodata.io/tarantool-testing:${BASE_IMAGE_TAG}
  variables:
    TEST_RUN_RETRIES: 3
    SERVER_START_TIMEOUT: 400
    REPLICATION_SYNC_TIMEOUT: 400
    TEST_TIMEOUT: 420
    NO_OUTPUT_TIMEOUT: 440
  script:
    - export PATH="$PATH:$PWD" # for GLAuth (CMake will download it)
    - make -f .test.mk test-coverage

# TODO: move out shared setup for fuzzing jobs
# Check that fuzzing works
fuzz-check-build:
    extends: .test
    tags: [shell_p_t]
    script:
      # Clone oss-fuzz instead of adding it as a submodule
      # as we don't want it to be checked by static analyzers - it's used only for fuzzing
      - git clone --depth=1 https://github.com/google/oss-fuzz.git
      - cd oss-fuzz
      # Checkout a fixed oss-fuzz commit to guarantee reproducible builds
      - git fetch --depth=1 origin e8e124996508f1e4ffe566896638c7213ab440d5
      - git checkout e8e124996508f1e4ffe566896638c7213ab440d5
      - python3 infra/helper.py build_fuzzers --external .. --sanitizer=address
      - python3 infra/helper.py check_build --external .. --sanitizer=address

# Generate coverage report
fuzz-coverage:
    extends: .test
    tags: [shell_p_t]
    when: manual
    script:
      # Clone oss-fuzz instead of adding it as a submodule
      # as we don't want it to be checked by static analyzers - it's used only for fuzzing
      - git clone --depth=1 https://github.com/google/oss-fuzz.git
      - cd oss-fuzz
      # Checkout a fixed oss-fuzz commit to guarantee reproducible builds
      - git fetch --depth=1 origin e8e124996508f1e4ffe566896638c7213ab440d5
      - git checkout e8e124996508f1e4ffe566896638c7213ab440d5
      - python3 infra/helper.py build_fuzzers --external .. --sanitizer=coverage
      # `coverage` command requires corpus folders to be located in
      # `oss-fuzz/build/corpus/{project_name}`
      # TODO: find out why they are not located there by default
      - mkdir -p build/corpus/tarantool
      - cp -r ../test/static/corpus/* build/corpus/tarantool
      # add `_fuzzer` postfix to corpus folders
      - (cd build/corpus/tarantool && for i in *; do mv "$i" "${i%.}_fuzzer"; done)
      - python3 infra/helper.py coverage --no-serve --external ..
    artifacts:
      paths:
        - oss-fuzz/build/out/tarantool/report

# Run fuzzers until they satisfy stop criterias
# XXX: Just a stub for now, it probably needs a custom runner
# and support for running several fuzzers
fuzz-run:
    tags: [shell_p_t]
    when: manual
    script:
      # Clone oss-fuzz instead of adding it as a submodule
      # as we don't want it to be checked by static analyzers - it's used only for fuzzing
      - git clone --depth=1 https://github.com/google/oss-fuzz.git
      - cd oss-fuzz
      # Checkout a fixed oss-fuzz commit to guarantee reproducible builds
      - git fetch --depth=1 origin e8e124996508f1e4ffe566896638c7213ab440d5
      - git checkout e8e124996508f1e4ffe566896638c7213ab440d5
      - python3 infra/helper.py build_image --no-pull --external ..
      - python3 infra/helper.py build_fuzzers --external .. --sanitizer=address
      - cd ..
      - mkdir swim_proto_meta_corpus
      - |
        python3 test/fuzz/fuzz_until.py swim_proto_meta_fuzzer \
        --libfuzzer-log swim_proto_meta.log \
        --corpus-dir swim_proto_meta_corpus

pack-on-tag:
  stage: pack
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    PROJECT_TARGET: 'tarantool-picodata'
    TYPE: 'RELEASE'
  inherit:
    variables:
      - TYPE
      - PROJECT_TARGET
      - BRANCH_TARGET
  trigger:
    project: 'picodata/devops/builder'
    strategy: depend

.kaniko-image:
  image:
    name: docker-public.binary.picodata.io/kaniko-project/executor:v1.23.1-debug
    entrypoint: ['']
    pull_policy: [if-not-present]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "$DOCKER_AUTH_CONFIG" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile ${DOCKERFILE}
      --build-arg TARANTOOL_VERSION=$CI_COMMIT_TAG ${PUSH_DOCKER}
      --cache=false --cache-run-layers=true --single-snapshot --compressed-caching=false --use-new-run --snapshot-mode=redo --cleanup
      --destination $DESTINATION

build-base-image:
  extends: .kaniko-image
  interruptible: true
  stage: build-base-image
  rules:
    - <<: *if-build-base-changes-on-master-branch
      variables:
        BASE_IMAGE_TAG: ${BASE_IMAGE_LATEST}
    - <<: *if-build-base-changes-on-dev-branch
      variables:
        BASE_IMAGE_TAG: ${CI_COMMIT_SHA}
    - if: $CI_COMMIT_TAG
      variables:
        BASE_IMAGE_TAG: ${BASE_IMAGE_LATEST}
    - <<: *else
      when: never
  variables:
    DOCKERFILE: docker/Dockerfile.ci
    DESTINATION: $DOCKER_REGISTRY_PUB/tarantool-testing:${BASE_IMAGE_TAG}
    PUSH_DOCKER: ""

build-docker-on-tag:
  stage: docker
  extends: .kaniko-image
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - pack-on-tag
  variables:
    PUSH_DOCKER: ""
    DOCKERFILE: docker/Dockerfile.release
    DESTINATION: $DOCKER_REGISTRY_PUB/tarantool:latest --destination $DOCKER_REGISTRY_PUB/tarantool:$CI_COMMIT_TAG

run-tntmodule-tests-on-tag:
  stage: docker
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    TARANTOOL_VERSION: $CI_COMMIT_TAG
  trigger:
    project: picodata/picodata/tarantool-module
    branch: master
    strategy: depend
  needs:
    - job: build-docker-on-tag
      artifacts: true
